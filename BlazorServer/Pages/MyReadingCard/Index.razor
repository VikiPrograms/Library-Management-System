@page "/myreadingcard/details"
@using BusinessLayer
@using ServiceLayer
@inject _UserManager _userManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>My Reading Card Details</h3>

    @if (model != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Reading Card Id
                    </th>
                    <th>
                        Username
                    </th>
                    <th>
                        Number Of Books
                    </th>
                    <th>
                        Number Of Overwrites
                    </th>
                    <th>
                        Date Created
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (model != null)
                {
                    <tr>
                        <td>
                            @model.ReadingCardId
                        </td>
                        <td>
                            @(model.UserName != null ? model.User.UserName : string.Empty)
                        </td>                       
                        <td>
                            @model.BorrowedBooks
                        </td>
                        <td>
                            @model.NumberOfOverwrites
                        </td>
                        <td>
                            @model.DateCreated
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        Book Titles
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (model != null && model.Books.Count != 0)
                {
                    @foreach (Book book in model.Books)
                    {
                        <tr>
                            <td><a href="book/details/@book.ISBN" class="col-md-2"> @book.Title</a></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        There aren't any picked up books!
                    </tr>
                }
            </tbody>
        </table>

        <br />

        <div>
            <button @onclick="() => OverwriteBooks()">Overwrite Books</button>
        </div>

        <br />

        <div>
            <a href="book/index">Go to Books</a>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }


@code {
    private ReadingCard model;
    private GenericManager<ReadingCard, int> readingCardManager = new(ContextHelper.GetReadingCardContext());

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userName = user.Identity.Name;
            var currentUser = await _userManager.FindUserByNameAsync(userName, true);
            currentUser.ReadingCard = await readingCardManager.ReadAsync(currentUser.ReadingCard.ReadingCardId, true);

            if (currentUser != null)
            {
                model = currentUser.ReadingCard;//ЗАЩО READING CARD E NULL?!?!?!?!??!?!?
            }
        }
    }

    protected async Task OverwriteBooks()
    {
        if(model.NumberOfOverwrites <= 3)
        {
            foreach (Book book in model.Books)
            {
                DateTime pickUpDateTime = DateTime.Now;
                DateTime returnDateTime = pickUpDateTime.AddDays(30);
                book.PickUpDate = DateOnly.FromDateTime(pickUpDateTime.Date);
                book.ReturnDate = DateOnly.FromDateTime(returnDateTime.Date);
            }
            model.NumberOfOverwrites += 1;
            await readingCardManager.UpdateAsync(model, true);
        }
        else
        {
            throw new ArgumentException("You cannot overwrite more than 3 times");
        }
    }
}
