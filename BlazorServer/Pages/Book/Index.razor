@page "/book/index"
@using BusinessLayer;
@using ServiceLayer;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject _UserManager _userManager;
@inject UserManager<ApplicationUser> userManager;
@inject ILogger<ApplicationUser> logger;

<h3>Books</h3>
<a href="book/create">Create</a>

<table class="table">
    <thead>
        <tr>
            <th>
                Title
            </th>
            <th></th>
            @*<th></th>*@
        </tr>
    </thead>
    <tbody>
        @foreach (Book book in models) 
        {
            <tr>
                <td>
                    @book.Title
                </td>
                <td>
                    <AuthorizeView Roles="Administrator">
                        <Authorized>
                            <a href="book/update/@book.ISBN/@book.Title"> Edit </a> |
                        </Authorized>
                    </AuthorizeView>
                    <a href="book/details/@book.ISBN"> Details </a> |
                    <AuthorizeView Roles="Administrator">
                        <Authorized>
                            <a href="book/delete/@book.ISBN/@book.Title/@book.Pages"> Delete </a> |
                        </Authorized>
                    </AuthorizeView>
                    <button @onclick="() => AddBookToMyReadingCard(book)">Add to My Reading Card</button> 
                </td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private GenericManager<Book, string> bookManager = new GenericManager<Book, string>(ContextHelper.GetBookContext());
    private GenericManager<ReadingCard, int> readingCardManager = new GenericManager<ReadingCard, int>(ContextHelper.GetReadingCardContext());
    private IEnumerable<Book> models = new List<Book>();
    private ApplicationUser currentUser;

    [Parameter]
    public string UserName{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Retrieve the username from claims
            UserName = user.Identity.Name;
            currentUser = await userManager.FindByNameAsync(UserName);
            currentUser = await _userManager.ReadUserAsync(currentUser.Id, true);
        }
        models = await bookManager.ReadAllAsync(true, false);

        await base.OnInitializedAsync();
    }

    private async Task AddBookToMyReadingCard(Book book)
    {
        if (currentUser != null)
        {

            if (currentUser.ReadingCard == null)
            {
                currentUser.ReadingCard = new ReadingCard(currentUser);
            }

            if (currentUser.ReadingCard.Books.Any(b => b.ISBN == book.ISBN))
            {
                logger.LogInformation("The book is already in the reading card.");
            }
            else
            {
                ReadingCard rc = await readingCardManager.ReadAsync(currentUser.ReadingCard.ReadingCardId);

                book.ReadingCard = currentUser.ReadingCard;
                book.ReadingCardId = currentUser.ReadingCard.ReadingCardId;
                DateTime pickUpDateTime = DateTime.Now;
                DateTime returnDateTime = pickUpDateTime.AddDays(30);
                book.PickUpDate = DateOnly.FromDateTime(pickUpDateTime.Date);
                book.ReturnDate = DateOnly.FromDateTime(returnDateTime.Date);
                book.IsPickedUp = true;

                currentUser.ReadingCard.Books.Add(book);
                currentUser.ReadingCard.BorrowedBooks += 1;

                rc.Books.Add(book);
                await readingCardManager.UpdateAsync(rc, true);
                logger.LogInformation("The book has been added to the reading card.");
            }
        }
        else
        {
            throw new ArgumentException("The current user is not logged in.");
        }
    }

}
