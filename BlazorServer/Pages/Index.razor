@page "/"
@using BlazorServer.Services;
@inject IJSRuntime js

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <h2 style="text-align: center;">Hello, @context.User.Identity.Name!</h2>
        <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
        <div style="justify-content: center; align-items: center; min-height: 100vh;">
            <h1 style="text-align: center; "> Welcome to E-Library: </h1>
            <h4 style="text-align: center;"> The best digital library archive </h4>
        </div>
    </Authorized>
    <NotAuthorized>
        <br />
        <h2 style="text-align: center;">Hello, Guest!</h2>
        <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> 
        <div style="justify-content: center; align-items: center; min-height: 100vh;">
            <h1 style="text-align: center; "> Welcome to E-Library: </h1>
            <h4 style="text-align: center;"> The best digital library archive </h4>
        </div>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        <br /><br />
    </Authorized>
</AuthorizeView>

@code
{
    private string error;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            error = string.Empty;
        }
        catch (Exception ex)
        {
            error = ex.InnerException != null ? ex.InnerException.Message : ex.Message;
        }

    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";
        await js.InvokeVoidAsync("alert", message);

    }
}