@page "/user/update/{UserName}"
@using BusinessLayer;
@using ServiceLayer;
@using Microsoft.Extensions.Logging;
@inject ErrorModel errorModel;
@inject ILogger<ApplicationUser> logger;
@inject NavigationManager navigationManager;
@inject _UserManager _userManager;
@inject UserManager<ApplicationUser> userManager;

<h3>Update User</h3>

@if (editContext == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            @*  <label for="username" class="col-1">Username</label>
            <InputText id="username" @bind-Value="model.UserName" class="col-2" readonly /> *@

            <label for="firstname" class="col-1">First Name</label>
            <InputText id="firstname" @bind-Value="model.FirstName" class="col-2" autofocus />

            <label for="lastname" class="col-1">Last Name</label>
            <InputText id="lastname" @bind-Value="model.LastName" class="col-2" />

            <InputSelect id="role" @bind-Value="model.Role">
                <option value="@model.Role"> @model.Role </option>
            </InputSelect>

            @* <label for="readingcardid" class="col-1">Reading Card Id</label>
            <InputNumber id="readingcardid" @bind-Value="model.ReadingCard.ReadingCardId" class="col-2" /> *@          
        </div>
        <div class="row">
            <a href="@($"/readingCard/update/{@model.ReadingCard.ReadingCardId}")">Update Reading Card</a>
        </div>
            <br />
            <button type="submit" class="col-1">Submit</button>
    </EditForm>
}
<div>
    <a href="user/index">Back to List</a>
</div>

@code
{
    private ApplicationUser model;
    private EditContext editContext;
    private GenericManager<ReadingCard, int> readingCardManager = new(ContextHelper.GetReadingCardContext());   
    private ICollection<ReadingCard> readingCards = new List<ReadingCard>();

    public string Id { get; set; }

    [Parameter]
    public string UserName { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }

    public Role Role { get; set; }

    public int ReadingCardId { get; set; }

    protected override async Task OnInitializedAsync()
    {       
        readingCards = await readingCardManager.ReadAllAsync(false, false);
        model = await userManager.FindByNameAsync(UserName);      
        //model.ReadingCard = readingCards.Where(r => r.ReadingCardId == model.ReadingCard.ReadingCardId).First();
        editContext = new EditContext(model);
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // ReadingCard readingCard = readingCards.FirstOrDefault(r => r.ReadingCardId == model.ReadingCard.ReadingCardId);
            // model.ReadingCard = readingCard;
            // model.ReadingCard.ReadingCardId = readingCard.ReadingCardId;
            await _userManager.UpdateUserAsync(model);

            logger.Log(LogLevel.Information, "User updated successfully!");
            navigationManager.NavigateTo("user/index", false);
        }
        catch (Exception ex)
        {
            logger.Log(LogLevel.Error, ex.Message);
        }
    }

}

